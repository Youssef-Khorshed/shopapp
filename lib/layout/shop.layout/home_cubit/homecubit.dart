import 'package:bloc/bloc.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shopapp/model/CartAddReomve/CartAddReomve.dart';
import 'package:shopapp/model/Cart_get/cartget.dart';
import 'package:shopapp/model/Logout/shop_logout.dart';
import 'package:shopapp/model/ShopCategories/shopcategories.dart';
import 'package:shopapp/model/ShopFavourite/favourite.dart';
import 'package:shopapp/model/ShopGetFavourite/getfvourite.dart';
import 'package:shopapp/model/ShopHomePage/shophomepage.dart';
import 'package:shopapp/model/shopmodel/models.dart';
import 'package:shopapp/module/ShopPages/favouritepage/Shop_FavouritePage_module.dart';
import 'package:shopapp/module/ShopPages/homepage/Shop_HomePage_module.dart';
import 'package:shopapp/module/ShopPages/settingspage/Shop_settingsPage_module.dart';
import 'package:shopapp/shared/component/component.dart';
import 'package:shopapp/shared/endpoints/endpoints.dart';
import 'package:shopapp/shared/network/references/dio.dart';

import 'homestatus.dart';

class ShopHomeCubit extends Cubit<ShopHomeStates> {

  ShopHomeCubit():super (ShopHomeInitialState());
  static ShopHomeCubit get(context)=> BlocProvider.of(context);
  int index = 0;
  List<BottomNavigationBarItem>items = [
    BottomNavigationBarItem(icon: Icon(Icons.home),label: 'Home'),
   // BottomNavigationBarItem(icon: Icon(Icons.category),label: 'Category'),
    BottomNavigationBarItem(icon: Icon(Icons.favorite_outline),label: 'Favourite'),
    BottomNavigationBarItem(icon: Icon(Icons.supervised_user_circle_outlined),label: 'Profile'),
  ];

  List<Widget>pages = [
    Shop_homePage(),
   // Shop_categoryPage(),
    Shop_favouritePage(),
    Shop_settingsPage(),
  ];
void navigate(int index)
{
  this.index = index;
  emit(ShopHomeNavigationState());
}
   ShopHomePage shopHome  = new ShopHomePage();
   Map<int,bool>favourites= {};
   Map<int,int?>addcart= {};
   List <Products>products_elec= [];
  List <Products>products_corona= [];
  List <Products>products_lights= [];
  List <Products>products_sport= [];
  void gethomedata() {
  emit(ShopHomeLoadingState());
  DioHelper.getdata(url: '$home', map: null).then((value) {
     shopHome = ShopHomePage.fromdata(map: value.data) ;
     shopHome.data.products.forEach((element) {
       favourites.addAll({element.id : element.favourite });
       addcart.addAll({element.id : 0});
       if(element.name.contains('ابل')|| element.name.contains('سامسونج')
           || element.name.contains('بلوتوث')|| element.name.contains('كينجستون')|| element.name.contains('موبايل')
           || element.name.contains('بلاي ستيشن')|| element.name.contains('كاميرا')){
         products_elec.add(element);
       }
       else if(element.name.contains('رياضي')|| element.name.contains('سباحة')|| element.name.contains('دراجة')|| element.name.contains('تمرين')){
         products_sport.add(element);
       }
      else  if(element.name.contains('كمامات')){
         products_corona.add(element);
       }
       else {
         products_lights.add(element);
       }
     });
     toast(message:'${products_corona.length}' , toaststate: Toaststate.success);
     emit(ShopHomeSucessDataState());
  });
}
 Categories categories=  new Categories();
void getcategories()
{
  DioHelper.getdata(url: 'categories', map:  null).then((value) {
    categories = Categories.from(map: value.data);
    print('categories state is - ${categories.data.catData[0].id}');
  });
}
  Shop_User shop_user = new Shop_User();
  void getuserdata()
  {
    DioHelper.getdata(url: '$profile', map:  null).then((value) {
      shop_user = Shop_User.from(map: value.data);
      print('userdata state is - ${shop_user.state}');
    });
  }
  LogoutShop shop_user_logout = new LogoutShop();
  void my_logout()
  {
    DioHelper.post(data: '',path: '$Logout',query: null).then((value) {
      shop_user_logout = LogoutShop.fromJson(value.data);
      print('userdata state is - ${shop_user_logout.message}');
    });
  }
ShopFavourite shopFavourite = new ShopFavourite();
void post_favourite_state(int id)
{
  favourites[id]= !favourites[id]!;
  emit(ShopHomeInitialSucessFavouriteState());
  DioHelper.post(path: favourite, data: {
    'product_id':id
  }).then((value) {
    shopFavourite=  ShopFavourite.from(map: value.data);
    if(!shopFavourite.state){
      favourites[id]= !favourites[id]!;
      emit(ShopHomeErrorFavouriteState(shopFavourite:shopFavourite));
    }
    emit(ShopHomeSucessFavouriteState(shopFavourite:shopFavourite));
    get_favourites();
    print(shopFavourite.message);
    print(favourites[id]);
  }).catchError((e){
    emit(ShopHomeErrorFavouriteState(shopFavourite:shopFavourite));
    print(e);
  });
}

Autogenerated autogenerated =new Autogenerated() ;
  void get_favourites()
  async { emit(ShopHomeLoadingGetFavouriteState());
    await DioHelper.getdata(url: '$favourite', map:  null).then((value) {
      autogenerated = Autogenerated.fromJson(value.data);
      print('autogenerated state is - ${autogenerated.status}');
     emit(ShopHomeSucessGetFavouriteState());
    }).catchError((e){
      print('error fav is ---- $e');
      print('token is ------ $token');
      emit(ShopHomeErrorGetFavouriteState());
    });
  }


  int pageitem = 0;
  void changesmooth(int index)
  {
    this.pageitem = index;
    emit(ShopHomesmoothState());
  }
  int cart_item = 0;
  Cart_get cart_get = new Cart_get();
  void cart_get_data(){
    emit(ShopHomeGotoCartState());
    emit(ShopHomeLoadingGetCartDataState());
    DioHelper.getdata(url: 'carts', map: null).then((value) {
      cart_get =  Cart_get.fromJson(value.data);
      cart_item =cart_get.data.cartItems.length;
      emit(ShopHomeSucessGetCartDataState());
    }).catchError((error){
      emit(ShopHomeErrorGetCartDataState(error: error.toString()));
      print(error.toString());
    });
  }

  AddRemove addRemove= new AddRemove();
void addtocart({required int id,required int qunatity})
{
  emit(ShopHomeLoadingAddRemoveCartDataState());
  DioHelper.post(path: 'carts', data:{
    "product_id":id
  } ).then((value) {
    addRemove = AddRemove.fromJson(value.data);
    print('cart add remove---- ${addRemove.message}');
    addRemove.data.id !=0 ?update(id: addRemove.data.id , quantity: addcart[id]!)
      :  null;
    emit(   ShopHomeSucessAddRemoveCartDataState())  ;
    cart_get_data();


  }).catchError((error){
    emit(   ShopHomeErrorAddRemoveCartDataState(error: error.toString()
    )

    )  ;
    print(error.toString());

  }) ;
}
void update({required int id,required int quantity}) {
  emit(ShopHomeLoadingAddRemoveCartDataState());

  if (quantity == 0) {
    emit(ShopHomeupdateErrorCartState(error: 'لا يوجد عناصر'));
  }
  else
    {
    DioHelper.put(path: 'carts/$id', data: {
      "quantity": quantity
    }).then((value) {
      print(value.data);
      emit(ShopHomeupdateCartState(message: value.data['message']));
    }).catchError((error) {
      emit(ShopHomeupdateErrorCartState(error: error.toString()));
    });
}
}

  int counter = 0 ;
  void pluscounter(int index)
  {
    counter++;
    addcart[index] = addcart[index]!+1;
    emit(ShopHomecounterchangeState());
  }
  void mincounter(int index)
  {
    counter--;
    addcart[index] = addcart[index]!-1;
    emit(ShopHomecounterchangeState());

  }
}